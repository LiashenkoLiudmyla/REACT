import { useParams } from "react-router-dom";


const TaskDescription1 = () => {
  return (
    <div>
      Задача №1. Робота з Toggler HOC - відповідає за функціоналом тоглера
      (переключення стану true/false) <br />
      1. Створити компонент User тa Todo, withToggler
      <br />
      • User рендерить дані юзера
      <br />
      • Album - рендерить дані альбома
      <br />
      • withToggler – HOC, який забезпечує функціонал тоглера
      <br />
      2. User:
      <br />
      • дані для поста можна скопіювати тут -
      https://jsonplaceholder.typicode.com/users/1
      <br />
      • рендерить данні username, email, a також детальну інформацію про юзера:
      address (city, street, suit), phone, company (name)
      <br />
      та кнопку “See details” / “hide details”
      <br />
      • при початковому рендері детальна інформація прихована, назва кнопки “See
      details”.
      <br />
      • при кліці на кнопку в стані “See details” – показуємо детальну
      інформацію і змінюємо назву кнопки на “Hide details”
      <br />
      • при кліці на кнопку в стані “ Hide details ” – показуємо детальну
      інформацію і змінюємо назву кнопки на “ See details”
      <br />
      3. Album :<br />
      • ****дані для альбому можна отримати тут -
      https://jsonplaceholder.typicode.com/albums/1/photos (перший елемент
      масиву)
      <br />
      • показує – назву альбома і його картинку
      <br />
      • Кнопка міняє свій статус (подобається / НЕ подобається) при кліці.
      <br />
      Іконки для кнопки можна отримати тут -
      https://www.flaticon.com/free-icons/heart
      <br />
      4. Логіку для toggled винести в HOC – withToggler.
      <br />
      Постачає WrappedComponent пропсами:
      <br />
      toggled (стан тоглера true/false) і changeToggled (функція для зміни стану
      тоглера)
    </div>
  );
};

export const TaskDescription2 = () => {
  return (
    <div>
      Задача №2 Робота з Fetching Data HOC, який відповідає за функціонал для
      асинхронного запиту.
      <br />
      2.1. Створити наступні компоненти: UsersList, User, AlbumsList, Album,
      withFetchingData
      <br />
      • UsersList – список усіх юзерів (тобто список із User).
      <br />
      • User – описує 1 юзера (username, email, address, phone, company)
      <br />
      • AlbumsList – список усіх коментарів (Comment)
      <br />
      • Album – описує 1 альбом (title)
      <br />
      • withFetchingData – HOC з функціоналом роботи з асинхронним кодом (запит
      на сервер, отримання даних, стан загрузки, наявність помилки)
      <br />
      2.2. Списки (UsersList та AlbumsList)
      <br />
      • логіку по роботі із асинхронним кодом отримують із HOC –
      withFetchingData (див.п2.3), який снабжає їх відповідними пропсами:
      <br />
      data (результат загрузки – масив певних даних), isLoading (стан загрузки),
      error (текст помилки)
      <br />
      • показують компонент Loader, якщо йде загрузка відповідних списків
      <br />
      • показують компонент Error, якщо наявна помилка при запиті
      <br />
      • рендерять відповідні списки – результат запиту
      <br />
      Примітки:
      <br />
      • в якості компонентів Loader і Error можна відобразити `div` з
      відповідним текстом
      <br />
      • компоненти User та Album можна взяти iз попереднього завдання
      <br />
      2.3. HOC - withFetchingData
      <br />
      • робить асинхронний запит
      <br />
      • забезпечує WrappedComponent наступними даними:
      <br />
      data (результат загрузки даних), isLoading (стан загрузки), error (текст
      помилки)
      <br />
      • сcилка для запиту отримується із пропса url компонента, створеного за
      допомогою нашого HOC
      <br />
      2.4. Ендпоінти для запитів:
      <br />
      • юзерів - https://jsonplaceholder.typicode.com/users?_limit=10
      <br />• альбоми -
      https://jsonplaceholder.typicode.com/albums/1/photos?_limit=10
    </div>
  );
};

export const TaskDescription3 = () => {
  return (
    <div>
      **Завдання #3 - робота з render-props** 1. Створити компоненти Task3,
      DataMaker, Posts, Post 2. Компонент Task3 1. Зберігає змінну з url -
      [https://jsonplaceholder.typicode.com/todos?_limit=10](https://jsonplaceholder.typicode.com/todos?_limit=10)
      2. У собі рендерит div , у якому вкладено компонент DataMaker 3. У
      DataMaker передається два пропс-url (зі значенням змінної url), і проп
      renderDataUrl-який у собі використовує патерн render props, а саме приймає
      data і прокидай їх у компонент Posts у вигляді пропа 3. Компонент
      DataMaker - це функціональний компонент, який приймає параметри url, і
      renderDataUrl 1. Усередині себе компонент має стан posts (у ньому
      зберігається пости) 2. Всередині себе виконується запит на сервер –
      використовуючи prop url (який прийшов раніше) 3. Дані, отримані з сервера,
      кладуться в state постів4. Функціональний компонент повертає div, в якому
      відбувається виклик функції renderDataUrl з передачею постів з state 4.
      Компоненти Posts && Post тільки відображають дані, отримані в пропах 1.
      Posts отримує проп з постами та малює список, усередині списку
      рендеруються компоненти Post 2. У компонент Post передавати все значення
      одним пропом 3. Компонент Post-приймає пропи та малює розмітку виду
      <br />
    </div>
  );
};

export const TaskDescription4 = () => {
  return (
    <div>
      Завдання №4: 4. ***Tooltip*** 4.1. містить всю логіку щодо відображення
      підказки: - відстежує показувати підказку чи ні (isTooltipShown), х/y
      позиції для відображення підказки (tooltipX/tooltipY) - функцію-тоглер
      (показати/сховати підказку) - функцію для зміни х/у позицій підказки під
      час руху мишки 4.2 рендерит: - Компонент (за допомогою render-props) - і
      саму підказку (відпозиціонований div + контент підказки, усередині цього
      div) 4.3. приймає 2 пропа: а) render, який має бути функцією. Тобто тут
      реалізовуватимемо Render Props. b) content – ​​вміст підказки (назва
      продукту, ціну та рейтинг.) 4.4. Колбек-функція для пропа render буде: -
      приймати аргументом функцію-тоглер для підказки + функцію для зміни х/у
      позицій підказки, - і повертати Компонент 5. ***Лінка для отримання даних
      з продуктами*** -
      [https://my.api.mockaroo.com/coffee.json?key=778301b0](https://my.api.mockaroo.com/coffee
      .json?key=778301b0) 1. ***Стилізація довільна***
    </div>
  );
};

export const TaskDescription5 = () => {
  return (
    <div>
      Завдання №5.
      <br />
      Реалізуйте функціонал із завдань 1-2 за допомогою кастомних хуків замість
      HOC-ів
    </div>
  );
};

export const TaskDescription6 = () => {
  return (
    <div>
      **Завдання 6. React Router** 1. Створити роутинг для вищезазначених
      завдань Кожне завдання (твої розв'язки завдань 1-5) потрібно рендерувати
      на окремій сторінці. Також мають бути сторінки “Main” та “ Tasks
      Description ” "Main" - це стартова сторінка (path = "/"). Вкажи для неї
      контент – “*Це рішення 4-го домашнього завдання від [твоє ім'я].”* 2.
      Header повинен містити лінки (посилання) та кнопку повернення на попередню
      сторінку. Він повинен бути закріплений вгорі і відображатися на всіх
      сторінках. Назва посилань відповідає назві завдань (task 1, task 2 тощо)
      Стилізація посилання, яка відповідає за сторінку, на якій ми знаходимося,
      повинна відрізнятися від інших посилань. 1. Для кнопки повернення можна
      завантажити стрілку, яка тобі сподобається тут:
      [https://icon-icons.com/download/72692/SVG/512/](https://icon-icons.com/download/72692/SVG
      /512/) При натисканні на стрілочку нас повертає на сторінку, на якій ми
      знаходилися до цього (напр. спочатку ми були на сторінці task 3, далі за
      посиланням перейшли на task 1. Тепер при натисканні на кнопку повернення
      нас повертає назад на сторінку task 3) 1. Також окремо створи сторінку
      Tasks Description. Тут ми матимемо опис завдань, які в тебе є. 4.1 При
      переході на цю сторінку спочатку бачитимемо тільки назву завдання: 1. Task
      #1 - Toggler HOC 2. Task #2 – Fetching Data HOC 3. Task #3 - render-props
      4. Task #4: - Tooltip 5. Task #5 - custom hooks 4.2 При натисканні на
      кожне завдання внизу під списком показуємо детальну інформацію про це
      завдання. При цьому шлях до завдання повинен мати такий вигляд:
      *description**/**idЗавдання*. Напр.. якщо description/3 – то відображаємо
      опис до завдання #3 Для написання цього роуту використовуйте вкладені
      роути (nested routes), напр.
    </div>
  );
};

const taskContent = {
  1: <TaskDescription1 />,
  2: <TaskDescription2 />,
  3: <TaskDescription3 />,
  4: <TaskDescription4 />,
  5: <TaskDescription5 />,
};
export const TaskDescription = () => {
  const { taskId } = useParams();
  return <>{taskContent[taskId]}</>;
};